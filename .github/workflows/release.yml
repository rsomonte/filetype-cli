name: Build and Release
on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Extract version
        id: version
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          else
            VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build Windows exe
        if: matrix.os == 'windows-latest'
        run: cargo build --release
      - name: Rename Windows exe
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mv target/release/filetype-cli.exe filetype-cli-${{ steps.version.outputs.VERSION }}-windows.exe
      - name: Build .deb
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          cargo install cargo-deb
          cargo deb --no-strip
          mv target/debian/filetype-cli_${{ steps.version.outputs.VERSION }}-*_amd64.deb filetype-cli-${{ steps.version.outputs.VERSION }}-amd64.deb
      - name: Build macOS binary
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --release
          mkdir -p pkg_root/usr/local/bin
          cp target/release/filetype-cli pkg_root/usr/local/bin/
          pkgbuild --identifier com.example.filetype-cli --version ${{ steps.version.outputs.VERSION }} --root pkg_root filetype-cli-${{ steps.version.outputs.VERSION }}.pkg
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            filetype-cli-*.exe
            filetype-cli-*.deb
            filetype-cli-*.pkg
          if-no-files-found: ignore
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: List downloaded files
        run: ls -la artifacts/
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}